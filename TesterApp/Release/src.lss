
src.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  000004e2  00000576  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00802006  00802006  0000057c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000278  00000000  00000000  00000cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002808  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000083c  00000000  00000000  00003730  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000a8a  00000000  00000000  00003f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002f0  00000000  00000000  000049f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000010b0  00000000  00000000  00004ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c98  00000000  00000000  00005d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000100  00000000  00000000  00006a30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	bc c0       	rjmp	.+376    	; 0x17a <__ctors_end>
   2:	00 00       	nop
   4:	f1 c0       	rjmp	.+482    	; 0x1e8 <__vector_1>
   6:	00 00       	nop
   8:	dd c0       	rjmp	.+442    	; 0x1c4 <__bad_interrupt>
   a:	00 00       	nop
   c:	db c0       	rjmp	.+438    	; 0x1c4 <__bad_interrupt>
   e:	00 00       	nop
  10:	d9 c0       	rjmp	.+434    	; 0x1c4 <__bad_interrupt>
  12:	00 00       	nop
  14:	d7 c0       	rjmp	.+430    	; 0x1c4 <__bad_interrupt>
  16:	00 00       	nop
  18:	d5 c0       	rjmp	.+426    	; 0x1c4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	d3 c0       	rjmp	.+422    	; 0x1c4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	d1 c0       	rjmp	.+418    	; 0x1c4 <__bad_interrupt>
  22:	00 00       	nop
  24:	cf c0       	rjmp	.+414    	; 0x1c4 <__bad_interrupt>
  26:	00 00       	nop
  28:	cd c0       	rjmp	.+410    	; 0x1c4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	cb c0       	rjmp	.+406    	; 0x1c4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	c9 c0       	rjmp	.+402    	; 0x1c4 <__bad_interrupt>
  32:	00 00       	nop
  34:	c7 c0       	rjmp	.+398    	; 0x1c4 <__bad_interrupt>
  36:	00 00       	nop
  38:	c5 c0       	rjmp	.+394    	; 0x1c4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	c3 c0       	rjmp	.+390    	; 0x1c4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	c1 c0       	rjmp	.+386    	; 0x1c4 <__bad_interrupt>
  42:	00 00       	nop
  44:	bf c0       	rjmp	.+382    	; 0x1c4 <__bad_interrupt>
  46:	00 00       	nop
  48:	bd c0       	rjmp	.+378    	; 0x1c4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	bb c0       	rjmp	.+374    	; 0x1c4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b9 c0       	rjmp	.+370    	; 0x1c4 <__bad_interrupt>
  52:	00 00       	nop
  54:	b7 c0       	rjmp	.+366    	; 0x1c4 <__bad_interrupt>
  56:	00 00       	nop
  58:	b5 c0       	rjmp	.+362    	; 0x1c4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	b3 c0       	rjmp	.+358    	; 0x1c4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	b1 c0       	rjmp	.+354    	; 0x1c4 <__bad_interrupt>
  62:	00 00       	nop
  64:	af c0       	rjmp	.+350    	; 0x1c4 <__bad_interrupt>
  66:	00 00       	nop
  68:	ad c0       	rjmp	.+346    	; 0x1c4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	ab c0       	rjmp	.+342    	; 0x1c4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	a9 c0       	rjmp	.+338    	; 0x1c4 <__bad_interrupt>
  72:	00 00       	nop
  74:	a7 c0       	rjmp	.+334    	; 0x1c4 <__bad_interrupt>
  76:	00 00       	nop
  78:	a5 c0       	rjmp	.+330    	; 0x1c4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	a3 c0       	rjmp	.+326    	; 0x1c4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	a1 c0       	rjmp	.+322    	; 0x1c4 <__bad_interrupt>
  82:	00 00       	nop
  84:	9f c0       	rjmp	.+318    	; 0x1c4 <__bad_interrupt>
  86:	00 00       	nop
  88:	9d c0       	rjmp	.+314    	; 0x1c4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	9b c0       	rjmp	.+310    	; 0x1c4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	99 c0       	rjmp	.+306    	; 0x1c4 <__bad_interrupt>
  92:	00 00       	nop
  94:	97 c0       	rjmp	.+302    	; 0x1c4 <__bad_interrupt>
  96:	00 00       	nop
  98:	95 c0       	rjmp	.+298    	; 0x1c4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	93 c0       	rjmp	.+294    	; 0x1c4 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	91 c0       	rjmp	.+290    	; 0x1c4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	8f c0       	rjmp	.+286    	; 0x1c4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	8d c0       	rjmp	.+282    	; 0x1c4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	8b c0       	rjmp	.+278    	; 0x1c4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	89 c0       	rjmp	.+274    	; 0x1c4 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	87 c0       	rjmp	.+270    	; 0x1c4 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	85 c0       	rjmp	.+266    	; 0x1c4 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	83 c0       	rjmp	.+262    	; 0x1c4 <__bad_interrupt>
  be:	00 00       	nop
  c0:	81 c0       	rjmp	.+258    	; 0x1c4 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	7f c0       	rjmp	.+254    	; 0x1c4 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	7d c0       	rjmp	.+250    	; 0x1c4 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	7b c0       	rjmp	.+246    	; 0x1c4 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	79 c0       	rjmp	.+242    	; 0x1c4 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	77 c0       	rjmp	.+238    	; 0x1c4 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	75 c0       	rjmp	.+234    	; 0x1c4 <__bad_interrupt>
  da:	00 00       	nop
  dc:	73 c0       	rjmp	.+230    	; 0x1c4 <__bad_interrupt>
  de:	00 00       	nop
  e0:	71 c0       	rjmp	.+226    	; 0x1c4 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	6f c0       	rjmp	.+222    	; 0x1c4 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	6d c0       	rjmp	.+218    	; 0x1c4 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	6b c0       	rjmp	.+214    	; 0x1c4 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	69 c0       	rjmp	.+210    	; 0x1c4 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	67 c0       	rjmp	.+206    	; 0x1c4 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	65 c0       	rjmp	.+202    	; 0x1c4 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	63 c0       	rjmp	.+198    	; 0x1c4 <__bad_interrupt>
  fe:	00 00       	nop
 100:	61 c0       	rjmp	.+194    	; 0x1c4 <__bad_interrupt>
 102:	00 00       	nop
 104:	5f c0       	rjmp	.+190    	; 0x1c4 <__bad_interrupt>
 106:	00 00       	nop
 108:	5d c0       	rjmp	.+186    	; 0x1c4 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	5b c0       	rjmp	.+182    	; 0x1c4 <__bad_interrupt>
 10e:	00 00       	nop
 110:	59 c0       	rjmp	.+178    	; 0x1c4 <__bad_interrupt>
 112:	00 00       	nop
 114:	57 c0       	rjmp	.+174    	; 0x1c4 <__bad_interrupt>
 116:	00 00       	nop
 118:	55 c0       	rjmp	.+170    	; 0x1c4 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	53 c0       	rjmp	.+166    	; 0x1c4 <__bad_interrupt>
 11e:	00 00       	nop
 120:	51 c0       	rjmp	.+162    	; 0x1c4 <__bad_interrupt>
 122:	00 00       	nop
 124:	4f c0       	rjmp	.+158    	; 0x1c4 <__bad_interrupt>
 126:	00 00       	nop
 128:	4d c0       	rjmp	.+154    	; 0x1c4 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	4b c0       	rjmp	.+150    	; 0x1c4 <__bad_interrupt>
 12e:	00 00       	nop
 130:	49 c0       	rjmp	.+146    	; 0x1c4 <__bad_interrupt>
 132:	00 00       	nop
 134:	47 c0       	rjmp	.+142    	; 0x1c4 <__bad_interrupt>
 136:	00 00       	nop
 138:	45 c0       	rjmp	.+138    	; 0x1c4 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	43 c0       	rjmp	.+134    	; 0x1c4 <__bad_interrupt>
 13e:	00 00       	nop
 140:	41 c0       	rjmp	.+130    	; 0x1c4 <__bad_interrupt>
 142:	00 00       	nop
 144:	3f c0       	rjmp	.+126    	; 0x1c4 <__bad_interrupt>
 146:	00 00       	nop
 148:	3d c0       	rjmp	.+122    	; 0x1c4 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	3b c0       	rjmp	.+118    	; 0x1c4 <__bad_interrupt>
 14e:	00 00       	nop
 150:	39 c0       	rjmp	.+114    	; 0x1c4 <__bad_interrupt>
 152:	00 00       	nop
 154:	37 c0       	rjmp	.+110    	; 0x1c4 <__bad_interrupt>
 156:	00 00       	nop
 158:	35 c0       	rjmp	.+106    	; 0x1c4 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	33 c0       	rjmp	.+102    	; 0x1c4 <__bad_interrupt>
 15e:	00 00       	nop
 160:	31 c0       	rjmp	.+98     	; 0x1c4 <__bad_interrupt>
 162:	00 00       	nop
 164:	2f c0       	rjmp	.+94     	; 0x1c4 <__bad_interrupt>
 166:	00 00       	nop
 168:	2d c0       	rjmp	.+90     	; 0x1c4 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	2b c0       	rjmp	.+86     	; 0x1c4 <__bad_interrupt>
 16e:	00 00       	nop
 170:	29 c0       	rjmp	.+82     	; 0x1c4 <__bad_interrupt>
 172:	00 00       	nop
 174:	27 c0       	rjmp	.+78     	; 0x1c4 <__bad_interrupt>
	...

00000178 <__ctors_start>:
 178:	e3 00       	.word	0x00e3	; ????

0000017a <__ctors_end>:
 17a:	11 24       	eor	r1, r1
 17c:	1f be       	out	0x3f, r1	; 63
 17e:	cf ef       	ldi	r28, 0xFF	; 255
 180:	df e2       	ldi	r29, 0x2F	; 47
 182:	de bf       	out	0x3e, r29	; 62
 184:	cd bf       	out	0x3d, r28	; 61

00000186 <__do_copy_data>:
 186:	10 e2       	ldi	r17, 0x20	; 32
 188:	a0 e0       	ldi	r26, 0x00	; 0
 18a:	b0 e2       	ldi	r27, 0x20	; 32
 18c:	e2 ee       	ldi	r30, 0xE2	; 226
 18e:	f4 e0       	ldi	r31, 0x04	; 4
 190:	02 c0       	rjmp	.+4      	; 0x196 <__do_copy_data+0x10>
 192:	05 90       	lpm	r0, Z+
 194:	0d 92       	st	X+, r0
 196:	a6 30       	cpi	r26, 0x06	; 6
 198:	b1 07       	cpc	r27, r17
 19a:	d9 f7       	brne	.-10     	; 0x192 <__do_copy_data+0xc>

0000019c <__do_clear_bss>:
 19c:	10 e2       	ldi	r17, 0x20	; 32
 19e:	a6 e0       	ldi	r26, 0x06	; 6
 1a0:	b0 e2       	ldi	r27, 0x20	; 32
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <.do_clear_bss_start>

000001a4 <.do_clear_bss_loop>:
 1a4:	1d 92       	st	X+, r1

000001a6 <.do_clear_bss_start>:
 1a6:	a2 31       	cpi	r26, 0x12	; 18
 1a8:	b1 07       	cpc	r27, r17
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <.do_clear_bss_loop>

000001ac <__do_global_ctors>:
 1ac:	11 e0       	ldi	r17, 0x01	; 1
 1ae:	ca e7       	ldi	r28, 0x7A	; 122
 1b0:	d1 e0       	ldi	r29, 0x01	; 1
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba <__do_global_ctors+0xe>
 1b4:	22 97       	sbiw	r28, 0x02	; 2
 1b6:	fe 01       	movw	r30, r28
 1b8:	67 d0       	rcall	.+206    	; 0x288 <__tablejump__>
 1ba:	c8 37       	cpi	r28, 0x78	; 120
 1bc:	d1 07       	cpc	r29, r17
 1be:	d1 f7       	brne	.-12     	; 0x1b4 <__do_global_ctors+0x8>
 1c0:	28 d0       	rcall	.+80     	; 0x212 <main>
 1c2:	8d c1       	rjmp	.+794    	; 0x4de <_exit>

000001c4 <__bad_interrupt>:
 1c4:	1d cf       	rjmp	.-454    	; 0x0 <__vectors>

000001c6 <_GLOBAL__sub_I__ZN10fixedpoint8fixcos16El>:
// Perform a fixed point multiplication using a 64-bit intermediate result to
// prevent overflow problems.
template <int p>
inline int32_t fixmul(int32_t a, int32_t b)
{
	return (int32_t)(((int64_t)a * b) >> p);
 1c6:	10 92 0a 20 	sts	0x200A, r1


    /* newton-raphson */
    /* x = x/2*(3-(a*x)*x) */
    i = 0;
    do {
 1ca:	10 92 0b 20 	sts	0x200B, r1
 1ce:	10 92 0c 20 	sts	0x200C, r1
    static const uint16_t rsq_tab[] = { /* domain 0.5 .. 1.0-1/16 */
		0xb504, 0xaaaa, 0xa1e8, 0x9a5f, 0x93cd, 0x8e00, 0x88d6, 0x8432,
    };

    int32_t i, exp;
    if (a == 0) return 0x7fffffff;
 1d2:	10 92 0d 20 	sts	0x200D, r1
 1d6:	10 92 06 20 	sts	0x2006, r1
 1da:	10 92 07 20 	sts	0x2007, r1
 1de:	10 92 08 20 	sts	0x2008, r1

		x = fixmul<16>((x>>1),((1<<16)*3 - fixmul<16>(fixmul<16>(a,x),x)));
    } while(++i < 3);

    return x;
}
 1e2:	10 92 09 20 	sts	0x2009, r1
 1e6:	08 95       	ret

000001e8 <__vector_1>:
		CPU_CCP			=	CCP_IOREG_gc;					// odblokowanie modyfikacji wa¿nych rejestrów
		OSC.XOSCFAIL	|=  1<<3;							// w³¹czenie uk³adu detekcji b³êdu sygna³u zegarowego
	}
};

ISR(OSC_XOSCF_vect) {									// przerwanie w razie awarii oscylatora
 1e8:	1f 92       	push	r1
 1ea:	0f 92       	push	r0
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	0f 92       	push	r0
 1f0:	11 24       	eor	r1, r1
 1f2:	8f 93       	push	r24
 1f4:	ef 93       	push	r30
 1f6:	ff 93       	push	r31
	OSC.XOSCFAIL	|=	OSC_XOSCFDIF_bm;				// kasowanie flagi przerwania
 1f8:	e0 e5       	ldi	r30, 0x50	; 80
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	83 81       	ldd	r24, Z+3	; 0x03
 1fe:	82 60       	ori	r24, 0x02	; 2
 200:	83 83       	std	Z+3, r24	; 0x03
}
 202:	ff 91       	pop	r31
 204:	ef 91       	pop	r30
 206:	8f 91       	pop	r24
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <main>:

#include "osc.hpp"
#include "fixedpoint/fixed_class.h"

int main(void) {
	auto clock = new ClockConfig;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	34 d0       	rcall	.+104    	; 0x280 <_Znwj>
 218:	21 e0       	ldi	r18, 0x01	; 1

	}

	void OscPLL(uint8_t pllfactor) {
		// uruchomienie generatora 2MHz i ustawienie go jako ród³a zegara
		OSC.CTRL		=	OSC_RC2MEN_bm;					// w³¹czenie oscylatora 2MHz
 21a:	20 93 50 00 	sts	0x0050, r18
 21e:	20 91 51 00 	lds	r18, 0x0051
		while(!(OSC.STATUS & OSC_RC2MRDY_bm));				// czekanie na ustabilizowanie siê generatora
 222:	20 ff       	sbrs	r18, 0
 224:	fc cf       	rjmp	.-8      	; 0x21e <main+0xc>
 226:	28 ed       	ldi	r18, 0xD8	; 216
		CPU_CCP			=	CCP_IOREG_gc;					// odblokowanie zmiany ród³a sygna³u zegarowego
 228:	24 bf       	out	0x34, r18	; 52
 22a:	10 92 40 00 	sts	0x0040, r1
		CLK.CTRL		=	CLK_SCLKSEL_RC2M_gc;			// zmiana ród³a sygna³u zegarowego na RC 2MHz
 22e:	20 91 50 00 	lds	r18, 0x0050

		// wy³¹czenie PLL
		OSC.CTRL		&= ~OSC_PLLEN_bm;
 232:	2f 7e       	andi	r18, 0xEF	; 239
 234:	20 93 50 00 	sts	0x0050, r18
 238:	20 e1       	ldi	r18, 0x10	; 16

		// konfiguracja PLL
		OSC.PLLCTRL		=	OSC_PLLSRC_RC2M_gc |			// wybór RC 2MHz jako ród³o sygna³u dla PLL
				pllfactor;									// mnożnik czêstotliwości (od 1 do 31)
 23a:	20 93 55 00 	sts	0x0055, r18
 23e:	20 93 50 00 	sts	0x0050, r18

		// uruchomienie PLL
		OSC.CTRL		=	OSC_PLLEN_bm;					// włączenie układu PLL
 242:	20 91 51 00 	lds	r18, 0x0051

		// czekanie na ustabilizowanie siê generatora
		while(!(OSC.STATUS & OSC_PLLRDY_bm));
 246:	24 ff       	sbrs	r18, 4
 248:	fc cf       	rjmp	.-8      	; 0x242 <main+0x30>
 24a:	28 ed       	ldi	r18, 0xD8	; 216

		// prze³¹czenie ród³a sygna³u zegarowego
		CPU_CCP			=	CCP_IOREG_gc;					// odblokowanie zmiany ród³a sygna³u zegarowego
 24c:	24 bf       	out	0x34, r18	; 52
 24e:	34 e0       	ldi	r19, 0x04	; 4
		CLK.CTRL		=	CLK_SCLKSEL_PLL_gc;				// wybór ród³a sygna³u zegarowego PLL
 250:	30 93 40 00 	sts	0x0040, r19
 254:	24 bf       	out	0x34, r18	; 52

		// uk³ad nadzoruj¹cy PLL
		CPU_CCP			=	CCP_IOREG_gc;					// odblokowanie modyfikacji wa¿nych rejestrów
 256:	20 91 53 00 	lds	r18, 0x0053
		OSC.XOSCFAIL	|=  1<<3;							// w³¹czenie uk³adu detekcji b³êdu sygna³u zegarowego
 25a:	28 60       	ori	r18, 0x08	; 8
 25c:	20 93 53 00 	sts	0x0053, r18
 260:	10 d0       	rcall	.+32     	; 0x282 <_ZdlPv>
	clock->OscPLL(16);
	delete clock;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	80 93 06 08 	sts	0x0806, r24

	fixedpoint::fixed_point<16> myPoint;
	fixedpoint::fixed_point<16> mySPoint;

	// konfiguracja przerwañ
	TCC0.INTCTRLA	=	TC_OVFINTLVL_LO_gc;			// przepe³nienie ma generowaæ przerwanie LO
 268:	80 93 a2 00 	sts	0x00A2, r24
	PMIC.CTRL		=	PMIC_LOLVLEN_bm;			// odblokowanie przerwañ o priorfytecie LO
 26c:	78 94       	sei
 26e:	10 92 01 08 	sts	0x0801, r1
	sei();											// globalne odblokowanie przerwañ

	// konfiguracja timera
	TCC0.CTRLB		=	TC_WGMODE_NORMAL_gc;		// tryb normalny
 272:	80 93 00 08 	sts	0x0800, r24
//	TCC0.CTRLFSET	=	TC0_DIR_bm;					// liczenie w dó³
	TCC0.CTRLA		=	TC_CLKSEL_DIV1_gc;			// ustawienie preskalera i uruchomienie timera
 276:	80 91 08 06 	lds	r24, 0x0608


	while(1){
		myPoint = fixedpoint::fixed_point<16>((int32_t)PORTA_IN);
 27a:	10 92 00 06 	sts	0x0600, r1
		myPoint =  myPoint+1;
		mySPoint = myPoint / mySPoint;
		PORTA_DIR = myPoint.intValue & 0xff;
 27e:	fb cf       	rjmp	.-10     	; 0x276 <main+0x64>

00000280 <_Znwj>:

#ifdef __cplusplus

// new i new[]
void * operator new(size_t size) {
	return malloc(size);
 280:	07 c0       	rjmp	.+14     	; 0x290 <malloc>

00000282 <_ZdlPv>:
 282:	9e c0       	rjmp	.+316    	; 0x3c0 <free>

00000284 <__tablejump2__>:
 284:	ee 0f       	add	r30, r30
 286:	ff 1f       	adc	r31, r31

00000288 <__tablejump__>:
 288:	05 90       	lpm	r0, Z+
 28a:	f4 91       	lpm	r31, Z
 28c:	e0 2d       	mov	r30, r0
 28e:	09 94       	ijmp

00000290 <malloc>:
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	91 05       	cpc	r25, r1
 298:	10 f4       	brcc	.+4      	; 0x29e <malloc+0xe>
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	e0 91 10 20 	lds	r30, 0x2010
 2a2:	f0 91 11 20 	lds	r31, 0x2011
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	a0 e0       	ldi	r26, 0x00	; 0
 2ac:	b0 e0       	ldi	r27, 0x00	; 0
 2ae:	30 97       	sbiw	r30, 0x00	; 0
 2b0:	39 f1       	breq	.+78     	; 0x300 <malloc+0x70>
 2b2:	40 81       	ld	r20, Z
 2b4:	51 81       	ldd	r21, Z+1	; 0x01
 2b6:	48 17       	cp	r20, r24
 2b8:	59 07       	cpc	r21, r25
 2ba:	b8 f0       	brcs	.+46     	; 0x2ea <malloc+0x5a>
 2bc:	48 17       	cp	r20, r24
 2be:	59 07       	cpc	r21, r25
 2c0:	71 f4       	brne	.+28     	; 0x2de <malloc+0x4e>
 2c2:	82 81       	ldd	r24, Z+2	; 0x02
 2c4:	93 81       	ldd	r25, Z+3	; 0x03
 2c6:	10 97       	sbiw	r26, 0x00	; 0
 2c8:	29 f0       	breq	.+10     	; 0x2d4 <malloc+0x44>
 2ca:	12 96       	adiw	r26, 0x02	; 2
 2cc:	8d 93       	st	X+, r24
 2ce:	9c 93       	st	X, r25
 2d0:	13 97       	sbiw	r26, 0x03	; 3
 2d2:	2c c0       	rjmp	.+88     	; 0x32c <malloc+0x9c>
 2d4:	80 93 10 20 	sts	0x2010, r24
 2d8:	90 93 11 20 	sts	0x2011, r25
 2dc:	27 c0       	rjmp	.+78     	; 0x32c <malloc+0x9c>
 2de:	21 15       	cp	r18, r1
 2e0:	31 05       	cpc	r19, r1
 2e2:	31 f0       	breq	.+12     	; 0x2f0 <malloc+0x60>
 2e4:	42 17       	cp	r20, r18
 2e6:	53 07       	cpc	r21, r19
 2e8:	18 f0       	brcs	.+6      	; 0x2f0 <malloc+0x60>
 2ea:	a9 01       	movw	r20, r18
 2ec:	db 01       	movw	r26, r22
 2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <malloc+0x62>
 2f0:	ef 01       	movw	r28, r30
 2f2:	9a 01       	movw	r18, r20
 2f4:	bd 01       	movw	r22, r26
 2f6:	df 01       	movw	r26, r30
 2f8:	02 80       	ldd	r0, Z+2	; 0x02
 2fa:	f3 81       	ldd	r31, Z+3	; 0x03
 2fc:	e0 2d       	mov	r30, r0
 2fe:	d7 cf       	rjmp	.-82     	; 0x2ae <malloc+0x1e>
 300:	21 15       	cp	r18, r1
 302:	31 05       	cpc	r19, r1
 304:	f9 f0       	breq	.+62     	; 0x344 <malloc+0xb4>
 306:	28 1b       	sub	r18, r24
 308:	39 0b       	sbc	r19, r25
 30a:	24 30       	cpi	r18, 0x04	; 4
 30c:	31 05       	cpc	r19, r1
 30e:	80 f4       	brcc	.+32     	; 0x330 <malloc+0xa0>
 310:	8a 81       	ldd	r24, Y+2	; 0x02
 312:	9b 81       	ldd	r25, Y+3	; 0x03
 314:	61 15       	cp	r22, r1
 316:	71 05       	cpc	r23, r1
 318:	21 f0       	breq	.+8      	; 0x322 <malloc+0x92>
 31a:	fb 01       	movw	r30, r22
 31c:	82 83       	std	Z+2, r24	; 0x02
 31e:	93 83       	std	Z+3, r25	; 0x03
 320:	04 c0       	rjmp	.+8      	; 0x32a <malloc+0x9a>
 322:	80 93 10 20 	sts	0x2010, r24
 326:	90 93 11 20 	sts	0x2011, r25
 32a:	fe 01       	movw	r30, r28
 32c:	32 96       	adiw	r30, 0x02	; 2
 32e:	44 c0       	rjmp	.+136    	; 0x3b8 <malloc+0x128>
 330:	fe 01       	movw	r30, r28
 332:	e2 0f       	add	r30, r18
 334:	f3 1f       	adc	r31, r19
 336:	81 93       	st	Z+, r24
 338:	91 93       	st	Z+, r25
 33a:	22 50       	subi	r18, 0x02	; 2
 33c:	31 09       	sbc	r19, r1
 33e:	28 83       	st	Y, r18
 340:	39 83       	std	Y+1, r19	; 0x01
 342:	3a c0       	rjmp	.+116    	; 0x3b8 <malloc+0x128>
 344:	20 91 0e 20 	lds	r18, 0x200E
 348:	30 91 0f 20 	lds	r19, 0x200F
 34c:	23 2b       	or	r18, r19
 34e:	41 f4       	brne	.+16     	; 0x360 <malloc+0xd0>
 350:	20 91 02 20 	lds	r18, 0x2002
 354:	30 91 03 20 	lds	r19, 0x2003
 358:	20 93 0e 20 	sts	0x200E, r18
 35c:	30 93 0f 20 	sts	0x200F, r19
 360:	20 91 00 20 	lds	r18, 0x2000
 364:	30 91 01 20 	lds	r19, 0x2001
 368:	21 15       	cp	r18, r1
 36a:	31 05       	cpc	r19, r1
 36c:	41 f4       	brne	.+16     	; 0x37e <malloc+0xee>
 36e:	2d b7       	in	r18, 0x3d	; 61
 370:	3e b7       	in	r19, 0x3e	; 62
 372:	40 91 04 20 	lds	r20, 0x2004
 376:	50 91 05 20 	lds	r21, 0x2005
 37a:	24 1b       	sub	r18, r20
 37c:	35 0b       	sbc	r19, r21
 37e:	e0 91 0e 20 	lds	r30, 0x200E
 382:	f0 91 0f 20 	lds	r31, 0x200F
 386:	e2 17       	cp	r30, r18
 388:	f3 07       	cpc	r31, r19
 38a:	a0 f4       	brcc	.+40     	; 0x3b4 <malloc+0x124>
 38c:	2e 1b       	sub	r18, r30
 38e:	3f 0b       	sbc	r19, r31
 390:	28 17       	cp	r18, r24
 392:	39 07       	cpc	r19, r25
 394:	78 f0       	brcs	.+30     	; 0x3b4 <malloc+0x124>
 396:	ac 01       	movw	r20, r24
 398:	4e 5f       	subi	r20, 0xFE	; 254
 39a:	5f 4f       	sbci	r21, 0xFF	; 255
 39c:	24 17       	cp	r18, r20
 39e:	35 07       	cpc	r19, r21
 3a0:	48 f0       	brcs	.+18     	; 0x3b4 <malloc+0x124>
 3a2:	4e 0f       	add	r20, r30
 3a4:	5f 1f       	adc	r21, r31
 3a6:	40 93 0e 20 	sts	0x200E, r20
 3aa:	50 93 0f 20 	sts	0x200F, r21
 3ae:	81 93       	st	Z+, r24
 3b0:	91 93       	st	Z+, r25
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <malloc+0x128>
 3b4:	e0 e0       	ldi	r30, 0x00	; 0
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	cf 01       	movw	r24, r30
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <free>:
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	00 97       	sbiw	r24, 0x00	; 0
 3c6:	09 f4       	brne	.+2      	; 0x3ca <free+0xa>
 3c8:	87 c0       	rjmp	.+270    	; 0x4d8 <free+0x118>
 3ca:	fc 01       	movw	r30, r24
 3cc:	32 97       	sbiw	r30, 0x02	; 2
 3ce:	12 82       	std	Z+2, r1	; 0x02
 3d0:	13 82       	std	Z+3, r1	; 0x03
 3d2:	c0 91 10 20 	lds	r28, 0x2010
 3d6:	d0 91 11 20 	lds	r29, 0x2011
 3da:	20 97       	sbiw	r28, 0x00	; 0
 3dc:	81 f4       	brne	.+32     	; 0x3fe <free+0x3e>
 3de:	20 81       	ld	r18, Z
 3e0:	31 81       	ldd	r19, Z+1	; 0x01
 3e2:	28 0f       	add	r18, r24
 3e4:	39 1f       	adc	r19, r25
 3e6:	80 91 0e 20 	lds	r24, 0x200E
 3ea:	90 91 0f 20 	lds	r25, 0x200F
 3ee:	82 17       	cp	r24, r18
 3f0:	93 07       	cpc	r25, r19
 3f2:	79 f5       	brne	.+94     	; 0x452 <free+0x92>
 3f4:	e0 93 0e 20 	sts	0x200E, r30
 3f8:	f0 93 0f 20 	sts	0x200F, r31
 3fc:	6d c0       	rjmp	.+218    	; 0x4d8 <free+0x118>
 3fe:	de 01       	movw	r26, r28
 400:	20 e0       	ldi	r18, 0x00	; 0
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	ae 17       	cp	r26, r30
 406:	bf 07       	cpc	r27, r31
 408:	50 f4       	brcc	.+20     	; 0x41e <free+0x5e>
 40a:	12 96       	adiw	r26, 0x02	; 2
 40c:	4d 91       	ld	r20, X+
 40e:	5c 91       	ld	r21, X
 410:	13 97       	sbiw	r26, 0x03	; 3
 412:	9d 01       	movw	r18, r26
 414:	41 15       	cp	r20, r1
 416:	51 05       	cpc	r21, r1
 418:	09 f1       	breq	.+66     	; 0x45c <free+0x9c>
 41a:	da 01       	movw	r26, r20
 41c:	f3 cf       	rjmp	.-26     	; 0x404 <free+0x44>
 41e:	a2 83       	std	Z+2, r26	; 0x02
 420:	b3 83       	std	Z+3, r27	; 0x03
 422:	40 81       	ld	r20, Z
 424:	51 81       	ldd	r21, Z+1	; 0x01
 426:	84 0f       	add	r24, r20
 428:	95 1f       	adc	r25, r21
 42a:	8a 17       	cp	r24, r26
 42c:	9b 07       	cpc	r25, r27
 42e:	71 f4       	brne	.+28     	; 0x44c <free+0x8c>
 430:	8d 91       	ld	r24, X+
 432:	9c 91       	ld	r25, X
 434:	11 97       	sbiw	r26, 0x01	; 1
 436:	84 0f       	add	r24, r20
 438:	95 1f       	adc	r25, r21
 43a:	02 96       	adiw	r24, 0x02	; 2
 43c:	80 83       	st	Z, r24
 43e:	91 83       	std	Z+1, r25	; 0x01
 440:	12 96       	adiw	r26, 0x02	; 2
 442:	8d 91       	ld	r24, X+
 444:	9c 91       	ld	r25, X
 446:	13 97       	sbiw	r26, 0x03	; 3
 448:	82 83       	std	Z+2, r24	; 0x02
 44a:	93 83       	std	Z+3, r25	; 0x03
 44c:	21 15       	cp	r18, r1
 44e:	31 05       	cpc	r19, r1
 450:	29 f4       	brne	.+10     	; 0x45c <free+0x9c>
 452:	e0 93 10 20 	sts	0x2010, r30
 456:	f0 93 11 20 	sts	0x2011, r31
 45a:	3e c0       	rjmp	.+124    	; 0x4d8 <free+0x118>
 45c:	d9 01       	movw	r26, r18
 45e:	12 96       	adiw	r26, 0x02	; 2
 460:	ed 93       	st	X+, r30
 462:	fc 93       	st	X, r31
 464:	13 97       	sbiw	r26, 0x03	; 3
 466:	4d 91       	ld	r20, X+
 468:	5d 91       	ld	r21, X+
 46a:	a4 0f       	add	r26, r20
 46c:	b5 1f       	adc	r27, r21
 46e:	ea 17       	cp	r30, r26
 470:	fb 07       	cpc	r31, r27
 472:	79 f4       	brne	.+30     	; 0x492 <free+0xd2>
 474:	80 81       	ld	r24, Z
 476:	91 81       	ldd	r25, Z+1	; 0x01
 478:	84 0f       	add	r24, r20
 47a:	95 1f       	adc	r25, r21
 47c:	02 96       	adiw	r24, 0x02	; 2
 47e:	d9 01       	movw	r26, r18
 480:	8d 93       	st	X+, r24
 482:	9c 93       	st	X, r25
 484:	11 97       	sbiw	r26, 0x01	; 1
 486:	82 81       	ldd	r24, Z+2	; 0x02
 488:	93 81       	ldd	r25, Z+3	; 0x03
 48a:	12 96       	adiw	r26, 0x02	; 2
 48c:	8d 93       	st	X+, r24
 48e:	9c 93       	st	X, r25
 490:	13 97       	sbiw	r26, 0x03	; 3
 492:	e0 e0       	ldi	r30, 0x00	; 0
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	8a 81       	ldd	r24, Y+2	; 0x02
 498:	9b 81       	ldd	r25, Y+3	; 0x03
 49a:	00 97       	sbiw	r24, 0x00	; 0
 49c:	19 f0       	breq	.+6      	; 0x4a4 <free+0xe4>
 49e:	fe 01       	movw	r30, r28
 4a0:	ec 01       	movw	r28, r24
 4a2:	f9 cf       	rjmp	.-14     	; 0x496 <free+0xd6>
 4a4:	ce 01       	movw	r24, r28
 4a6:	02 96       	adiw	r24, 0x02	; 2
 4a8:	28 81       	ld	r18, Y
 4aa:	39 81       	ldd	r19, Y+1	; 0x01
 4ac:	82 0f       	add	r24, r18
 4ae:	93 1f       	adc	r25, r19
 4b0:	20 91 0e 20 	lds	r18, 0x200E
 4b4:	30 91 0f 20 	lds	r19, 0x200F
 4b8:	28 17       	cp	r18, r24
 4ba:	39 07       	cpc	r19, r25
 4bc:	69 f4       	brne	.+26     	; 0x4d8 <free+0x118>
 4be:	30 97       	sbiw	r30, 0x00	; 0
 4c0:	29 f4       	brne	.+10     	; 0x4cc <free+0x10c>
 4c2:	10 92 10 20 	sts	0x2010, r1
 4c6:	10 92 11 20 	sts	0x2011, r1
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <free+0x110>
 4cc:	12 82       	std	Z+2, r1	; 0x02
 4ce:	13 82       	std	Z+3, r1	; 0x03
 4d0:	c0 93 0e 20 	sts	0x200E, r28
 4d4:	d0 93 0f 20 	sts	0x200F, r29
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <_exit>:
 4de:	f8 94       	cli

000004e0 <__stop_program>:
 4e0:	ff cf       	rjmp	.-2      	; 0x4e0 <__stop_program>
